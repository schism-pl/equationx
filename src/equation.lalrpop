use std::str::FromStr;
use crate::ast::{Expr, Equation};

grammar;

pub Equation: Equation = {
    <lhs:Var> "=" <rhs:Expr> => Equation::new(lhs, rhs)
};

pub Expr:  Box<Expr> = {
    "-" <op:Term0> => Box::new(Expr::Neg(op)),    
    <r:Term0> => r,
};

pub Term0:  Box<Expr> = {
    <op1:Term0> "+" <op2:Term1> => Box::new(Expr::Add(op1, op2)),    
    <op1:Term0> "-" <op2:Term1> => Box::new(Expr::Sub(op1, op2)),     
    <r:Term1> => r,
};

Term1: Box<Expr> = {
    <op1:Term1> "*" <op2:Term2> => Box::new(Expr::Mul(op1, op2)),    
    <op1:Term1> "/" <op2:Term2> => Box::new(Expr::Div(op1, op2)), 
    <r:Term2> => r,
};

Term2: Box<Expr> = {
    <op1:Factor> "^" <op2:Term2> => Box::new(Expr::Pow(op1, op2)), 
    <r:Factor> => r,
};


Factor: Box<Expr> = {
    <v:Var> =>  Box::new(Expr::Var(v)),
    <c:Const> => Box::new(Expr::Const(c)),   
    "log(" <a1:Expr> "," <a2:Expr> ")" => Box::new(Expr::Log(a1, a2)), 
    "sin(" <a:Expr> ")" => Box::new(Expr::Sin(a)), 
    "cos(" <a:Expr> ")" => Box::new(Expr::Cos(a)),  
    "(" <e:Expr> ")" => e,
};

Const: f64 = {
    r"[0-9]*\.?[0-9]+" => f64::from_str(<>).unwrap(),
};

Var: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => (<>).into(),
};